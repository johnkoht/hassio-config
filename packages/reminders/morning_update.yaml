automation:
  - id: "morning_update"
    alias: "Morning Update"
    mode: "single"
    trigger:
      # # Bedtime mode is disabled
      # - platform: state
      #   entity_id: input_boolean.bedtime
      #   from: "on"
      #   to: "off"
      - platform: time
        at: "07:05:00"
    condition:
      # House is occupied
      - condition: state
        entity_id: input_boolean.house_occupied
        state: "on"
    action:
      # Wait for quiet mode to be disabled
      - wait_template: "{{ is_state('input_boolean.quiet_mode', 'off') }}"
        timeout: "00:45:00"
      # Kitchen has been occupied for more than 15 minutes
      - wait_template: "{{ (as_timestamp(now()) - as_timestamp(states.binary_sensor.kitchen_motion_sensor_occupancy.last_changed)) | int >= 900 }}"
        timeout: "00:15:00"
        continue_on_timeout: false
      # Wait for motion in the kitchen
      - wait_template: "{{ is_state('binary_sensor.kitchen_motion_sensor_status', 'on') }}"
        timeout: "00:30:00"
        continue_on_timeout: false
      - alias: "Wait 2 seconds"
        delay: 2
      - service: script.morning_update_announcement

script:
  morning_update_announcement:
    alias: "Morning Update Announcement"
    mode: "single"
    icon: mdi:air-horn

    sequence:
      #
      # Use ChatGPT to get the daily briefing
      #
      - service: conversation.process
        data:
          agent_id: conversation.chatgpt
          text: >-
            You're part of my smart home! Every morning, I'd like to provide the family with an overview of the day, including weather, school calendar events, and birthdays. I'll send you a bunch of information that you can parse to provide text-based overview that can be broadcast on a text-to-speech system throughout my house.

            While each day's information might change, the general information that I'd like you to extract and send back including:

            - Weather for the day, including the current temperature and the daily high and low
            - A list of school related events or notifications from thes school calendar including only the start time, you can ignore the end time. If the event is all day, just ignore the time all the together and treat it as a reminder.
            - Any birthdays that are on the calendar.

            We're the Koht family. We're a family of four. My name is John, my wife is Cristina, and our kids Nino and Gianluca are 5 and 3, respectively. 

            Be fun, playful, and delightful. 

            Some things to note and consider when responding:
            - Don't use emojis as this will be a voice-activated TTS message
            - Use full sentences instead of using special characters, lists or bullet points, and making it easily readable
            - If there are no birthdays then you can skip this part altogether and not mention that there are not birthdays
            - If there are no calendar invites, you can simply let us know there's nothing on the calendar
            - When covering all of the weather details, plese be very concise. 

            Please read the carefully and ensure you follow the instructions. Remember, this should be plain text sentences that a computer can read and generate a text-to-speech message from.

            Reminder to make sure your response is one single paragraph without any line breaks or bullet points! This is important!

            Here is the information for today's daily briefing:

            Here are the school calendar events:
            {{ states.sensor.calendar_events_today.attributes.events }}

            {% if states.binary_sensor.primary_school_closed.state == "on" %}
              There is no school today, so make sure to let Nino know!
            {% endif %}

            {% if states.input_boolean.primary_school_day == "on" %}
              Today is a school day, so make sure to let Nino know. While Nino doesn't usually get hot lunch from school, I'd like to share some of the items on the menu to see if any peak his interest. He likes chicken nuggets (not the the plant based one, please don't mention these), pizza, cheeseburgers, and caesar salad. If any of these items are in the list below, please let us know.
              {{ states.sensor.primary_school_lunch_menu.attributes.lunch_menu }}
            {% endif %}

            Here is the temperature and weather information:
            Today's High: {{ states.sensor.pirateweather_daytime_high_temperature_0d.state }}
            Today's Low: {{ states.sensor.pirateweather_overnight_low_temperature_0d.state }}
            Current Weather: {{ states.weather.pirateweather }}
        response_variable: chatgpt
      #
      # Push Notification
      #
      - service: script.general_notification
        data:
          title: "Daily Update!"
          message: '{{chatgpt.response.speech.plain.speech | trim | replace(''"'','''')}}'
          devices: "jk"
          priority: "time-sensitive"
          tag: "daily-update"
      #
      # Voice Announcement
      #
      - service: script.voice_announcement
        data:
          media_players: "auto"
          sound: "default"
          speech_message: '{{chatgpt.response.speech.plain.speech | trim | replace(''"'','''')}}'

#
#
# Calendar Events for Today Template Sensor
#
template:
  - trigger:
      - platform: time_pattern
        hours: /1
    action:
      - service: calendar.get_events
        data:
          start_date_time: "{{ now().strftime('%Y-%m-%d 00:00:00') }}"
          end_date_time: "{{ now().strftime('%Y-%m-%d 23:59:59') }}"
        target:
          entity_id:
            - calendar.gianluca_school
            - calendar.ninos_school
            #- calendar.kohbocal
            - calendar.lyon_school
        response_variable: calendar
      - variables:
          e: |-
            {% set ns = namespace(cal_events=[]) %}

            {%- for key, value in calendar.items() %}
              {%- for event in value.events %}
                {%- set ns.cal_events = ns.cal_events + [event] %}
              {%- endfor %}
            {%- endfor %}

            {{ ns.cal_events | sort(attribute='start') | list }}
    #
    # This is the sensor that will provide a list of events
    sensor:
      - name: Calendar Events Today
        unique_id: calendar_events_today
        state: "{{ now().isoformat() }}"
        attributes:
          events: "{{ e }}"

  #
  #
  # Weather Forecast Sensor
  #
  - trigger:
      # - platform: state
      #   entity_id: weather.pirateweather
      - platform: time_pattern
        hours: /1
    action:
      - service: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: weather.pirateweather
        response_variable: weather_forecast
    #
    # This is the sensor that provide the forecast data (first 10)
    sensor:
      - name: Weather Forecast Today
        unique_id: weather_forecast_today
        state: "{{ now().isoformat() }}"
        attributes:
          forecast: "{{ weather_forecast['weather.pirateweather'].forecast[:10] }}" # note the array index with the weather provider name. This is what is different with get_forecasts (plural)
