automation:
  - id: "hourly_dong"
    alias: "Hourly Dong"
    mode: "single"
    trigger:
      # # At 7am
      # - platform: time
      #   at: "07:00:00"
      # # At 8am
      # - platform: time
      #   at: "08:00:00"
      # At 5pm
      - platform: time
        at: "17:00:00"
      # At 6pm
      - platform: time
        at: "18:00:00"
      # At 7pm
      - platform: time
        at: "19:00:00"
    condition:
      # House is occupied
      - condition: state
        entity_id: input_boolean.house_occupied
        state: "on"
      # Speech notifications are enabled
      - condition: state
        entity_id: input_boolean.speech_notifications
        state: "on"
    action:
      # Media players of occupied rooms
      - alias: "Sound File"
        variables:
          media_players: >-
            {% set media_players = [] %}   
            {# Check which rooms are occupied and if speech notifications are turned #}
            {# on for them. If so, add them to an array of announceable rooms #}
            {% if states.input_boolean.office_occupied.state == "on" and states.input_boolean.office_speech_notifications.state == "on" %}
              {% set media_players = media_players + ["media_player.sonos_office"] %}
            {% endif %}{% if states.input_boolean.family_room_occupied.state == "on" and states.input_boolean.family_room_speech_notifications.state == "on" %}
              {% set media_players = media_players + ["media_player.sonos_family_room"] %}
            {% endif %}{% if states.input_boolean.kitchen_occupied.state == "on" and states.input_boolean.kitchen_speech_notifications.state == "on" %}
              {% set media_players = media_players + ["media_player.sonos_kitchen"] %}
            {% endif %}{% if states.input_boolean.main_bedroom_occupied.state == "on" and states.input_boolean.main_bedroom_speech_notifications.state == "on" %}
              {% set media_players = media_players + ["media_player.sonos_main_bedroom"] %}
            {% endif %}{% if states.input_boolean.playroom_occupied.state == "on" %}
              {% set media_players = media_players + ["media_player.sonos_playroom"] %}
            {% endif %}
            {{ media_players}}
          primary_player: "{{media_players | first}}"
          sound_file: "https://github.com/johnkoht/hassio-config/blob/master/sounds/dong.mp3?raw=true"

      # Take a snapshot of current Sonos Audio
      - service: sonos.snapshot
        entity_id: all
        data:
          with_group: true

      # Pause the media players
      - service: media_player.media_pause
        data:
          entity_id: "{{media_players}}"

      # # Capture the current media player volumes
      # - service: script.set_media_player_volume
      #   data:
      #     media_player: "{{media_players}}"

      # Set the volume for the ding
      - service: media_player.volume_set
        data_template:
          entity_id: >
            {{ media_players }}
        data:
          volume_level: >-
            {% if states.input_boolean.quiet_mode.state == "on" %}
              0.5
            {% elif now().strftime('%H')|int > 8 and now().strftime('%H')|int < 20 %}
              0.8
            {% else %}
              0.6
            {% endif %}

      - service: media_player.join
        data:
          entity_id: "{{primary_player}}"
          group_members: "{{media_players}}"

      - alias: "Wait 1s"
        delay: 00:00:01

      # Play an announcement ping
      - service: media_player.play_media
        data:
          entity_id: "{{primary_player}}"
          media_content_id: "{{sound_file}}"
          media_content_type: music

      - wait_template: "{{ states( primary_player ) == 'playing' }}"
        timeout:
          seconds: 3

      # - alias: "Wait 3s"
      #   delay: 00:00:03

      # # then we wait for it to finish announcing before we continue
      # - wait_template: "{{ states( primary_player ) != 'playing' }}"
      #   timeout:
      #     seconds: 3

      # - alias: "Wait 1s"
      #   delay: 00:00:01

      - service: media_player.unjoin
        data:
          entity_id: "{{media_players}}"

      # Restore the media player volumes
      - service: script.restore_media_player_volume
        data:
          media_player: "{{media_players}}"

      # Restore from snapshot
      - service: sonos.restore
        entity_id: all
        data:
          with_group: true
