automation:
  #
  # Automation that simply enables the heater automation
  # in the evening after kids sleep
  - id: "enable_nino_bathroom_heater_automation"
    alias: "Enable Nino's Bathroom Heater Automation"
    initial_state: on
    trigger:
      # Nino's room becomes occupied for 30 mins
      - platform: state
        entity_id: input_boolean.ninos_room_occupied
        to: "on"
        for:
          minutes: 30
      # Bedtime mode is enabled
      - platform: state
        entity_id: input_boolean.bedtime
        to: "on"
      # Just after midnight
      - platform: time
        at: "00:01:00"
      # Hassio reloads/starts
      - platform: event
        event_type: automation_reloaded
      - platform: homeassistant
        event: start
    condition:
      # House is occupied
      - condition: state
        entity_id: input_boolean.house_occupied
        state: "on"
      # Nino's room is occupied
      - condition: state
        entity_id: input_boolean.ninos_room_occupied
        state: "on"
      # It's after 6pm
      - condition: time
        after: "18:00:00"
      # Automation is off
      - condition: state
        entity_id: automation.nino_s_bathroom_heater_on
        state: "off"
    action:
      - service: automation.turn_on
        entity_id: automation.nino_s_bathroom_heater_on

  #
  # Automation that actually listens to triggers and
  # turns on the plug for the heater
  - id: "ninos_bathroom_heater_on"
    alias: "Nino's Bathroom Heater On"
    initial_state: off
    trigger:
      # It's morning time
      - platform: time
        at: "05:00:00"
      # Nino's door is opened
      - platform: state
        entity_id: binary_sensor.ninos_door_sensor_status
        to: "on"
      # It's less than 71
      - platform: template
        value_template: "{{ (states.sensor.aqara_weather_sensor_1_temperature.state | float) < 71.0 }}"
      # It's less than 61
      - platform: template
        value_template: "{{ (states.sensor.aqara_weather_sensor_1_temperature.state | float) < 61.0 }}"
    condition:
      # The house is occupied
      - condition: state
        entity_id: input_boolean.house_occupied
        state: "on"
      - condition: or
        conditions:
          # Room is occupied
          - condition: state
            entity_id: input_boolean.ninos_room_occupied
            state: "on"
          # It's below 65 degrees
          - condition: template
            value_template: "{{ (states.sensor.aqara_weather_sensor_1_temperature.state | float) < 65.0 }}"
      # It's after 4:30 am
      - condition: time
        after: "04:30:00"
      # It's below 71 degrees
      - condition: template
        value_template: "{{ (states.sensor.aqara_weather_sensor_1_temperature.state | float) < 71.0 }}"
      # Switch is OFF
      - condition: state
        entity_id: switch.smart_plug_6_switch
        state: "off"
    action:
      # Switch the power plug on
      - service: switch.turn_on
        entity_id: switch.smart_plug_6_switch
      # Turn off the automation
      - service: automation.turn_off
        entity_id: automation.nino_s_bathroom_heater_on

  #
  # Automation that turns off the heater if the ideal
  # temperature is reached, the room is no longer occupied
  # or the house is not occupied
  - id: "ninos_bathroom_heater_off"
    alias: "Nino's Bathroom Heater Off"
    initial_state: on
    trigger:
      # Bathroom temperature over 73.5
      - platform: template
        value_template: "{{ (states.sensor.aqara_weather_sensor_1_temperature.state | float) > 73.5 }}"
      # Nino's room is no longer occupied
      - platform: state
        entity_id: input_boolean.ninos_room_occupied
        to: "off"
        for:
          minutes: 20
      # If the house is not occupied
      - platform: state
        entity_id: input_boolean.house_occupied
        to: "off"
      # If the plug is on for more than 3 hours
      - platform: state
        entity_id: switch.smart_plug_6_switch
        to: "on"
        for:
          hours: 3
    condition:
      # Switch is ON
      - condition: state
        entity_id: switch.smart_plug_6_switch
        state: "on"
    action:
      # Switch the power plug OFF
      - service: switch.turn_off
        entity_id: switch.smart_plug_6_switch

  - id: "ninos_bathroom_heater_turn_on_upon_arrival"
    alias: "Nino's Bathroom Heater - Turn On Upon Arrival"
    initial_state: on
    trigger:
      # House becomes occupied
      - platform: state
        entity_id: input_boolean.house_occupied
        to: "on"
      # We're home
      - platform: state
        entity_id: group.family
        from: "not_home"
        to: "home"
      # We just arrived
      - platform: state
        entity_id:
          - person.cristina_falbo
          - person.john_koht
        to: "Just Arrived"
    condition:
      - condition: or
        conditions:
          # House has just become occupied
          - condition: template
            value_template: "{{ (as_timestamp(now()) - as_timestamp(states.input_boolean.house_occupied.last_updated)) | int < 300 }}"
          - condition: and
            conditions:
              # We just got home
              - condition: state
                entity_id: group.family
                state: "home"
              - condition: template
                value_template: "{{ (as_timestamp(now()) - as_timestamp(states.group.familiy.last_updated)) | int < 300 }}"
              # Person state is Just Arrived
              - condition: state
                entity_id:
                  - person.cristina_falbo
                  - person.john_koht
                state: "Just Arrived"
      # It's not that warm in his room
      - condition: template
        value_template: "{{ (states.sensor.aqara_weather_sensor_1_temperature.state | float) < 71.5 }}"
      # After 6:30 PM
      - condition: time
        after: "18:30:00"
    action:
      # Switch the power plug on
      - service: switch.turn_on
        entity_id: switch.smart_plug_6_switch
