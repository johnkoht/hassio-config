# Doorbell Detected Object
#
automation:
  - id: "front_door_camera_detections"
    alias: "Front Door Camera Detections"
    mode: "single"
    trigger:
      # Front door camera detects something
      - platform: state
        entity_id:
          - binary_sensor.front_door_camera_person_detected
          - binary_sensor.front_door_camera_animal_detected
          - binary_sensor.front_door_camera_vehicle_detected
        to: "on"
        variables:
          camera_name: "Front Doorbell Camera"
          nvr_id: "{{ config_entry_id(trigger.entity_id) }}"
          event_id: "{{ state_attr(trigger.entity_id, 'event_id') }}"
          image_path: /api/unifiprotect/thumbnail/{{ nvr_id }}/{{ event_id }}
          proxy_camera: camera.camera_proxy_camera_front_door_camera_high_resolution_channel
    condition:
      - condition: template
        value_template: "{{ ( now().timestamp() - as_timestamp(state_attr('automation.front_door_camera_detections','last_triggered')) ) | int > 60 }}"
    action:
      # - service: notify.mobile_app_jk_2
      #   metadata: {}
      #   data:
      #     title: "Test"
      #     message: "Test message"
      #     data:
      #       image: "{{image_path}}"
      #       push:
      #         sound:
      #           name: default
      #           critical: 1
      #           volume: 1
      #       entity_id: "{{ proxy_camera }}"
      #
      # If camera notifications are disabled and a person is
      # detected then always alert us
      - choose:
          - conditions:
              # Camera Notifications are disabled
              - condition: state
                entity_id: input_boolean.camera_notifications
                state: "off"
              # It's a person detection
              - condition: template
                value_template: "{{ 'person' in trigger.entity_id }}"
            sequence:
              - service: script.camera_detection_alert
                data:
                  entity_id: "{{ trigger.entity_id }}"
                  camera_name: "{{ camera_name }}"
                  image_path: "{{ image_path }}"
                  proxy_camera: "{{ proxy_camera }}"
      #
      #
      # If camera notifications are enabled, then always
      # trigger an alert
      - choose:
          - conditions:
              # Camera Notifications are enabled
              - condition: state
                entity_id: input_boolean.camera_notifications
                state: "on"
            sequence:
              - service: script.camera_detection_alert
                data:
                  entity_id: "{{ trigger.entity_id }}"
                  camera_name: "{{ camera_name }}"
                  image_path: "{{ image_path }}"
                  proxy_camera: "{{ proxy_camera }}"
#
#
#
#
# # Doorbell Detected Object
# #
# automation:
#   - id: "front_door_camera_detections"
#     alias: "Front Door Camera Detections"
#     mode: "single"
#     trigger:
#       # Front door camera detects something
#       - platform: state
#         entity_id:
#           - binary_sensor.front_door_camera_person_detected
#           - binary_sensor.front_door_camera_animal_detected
#           #- binary_sensor.front_door_camera_package_detected
#           - binary_sensor.front_door_camera_vehicle_detected
#         #to: "on"
#         from: "on"
#         to: "off"
#         variables:
#           camera_name: "{{ device_attr(trigger.entity_id, 'name') }}"
#           nvr_id: "{{ config_entry_id(trigger.entity_id) }}"
#           #event_id: "{{ state_attr(trigger.entity_id, 'event_id') }}"
#           event_id: "{{ trigger.from_state.attributes.event_id }}"
#           image_path: /api/unifiprotect/thumbnail/{{ nvr_id }}/{{ event_id }}
#           #start: "{{ state_attr(trigger.from_state, 'last_changed') }}"
#           #end: "{{ state_attr(trigger.to_state, 'last_changed') }}"
#           #start: "{{ ( (trigger.from_state.last_changed - timedelta(seconds = 2) ) | string | replace(' ', '+') ).split('.')[0] }}"
#           start: "{{ ( (trigger.from_state.last_changed - timedelta(seconds = 2)).isoformat(timespec='seconds', sep='T') ) | string }}"
#           end: "{{ ( (trigger.to_state.last_changed + timedelta(seconds = 2)).isoformat(timespec='seconds', sep='T') ) | string }}"
#           #end: "{{ ( (trigger.to_state.last_changed + timedelta(seconds = 2) ) | isoformat(timespec='seconds', sep='T') | string }}"
#           video_path: "/api/unifiprotect/video/{{ nvr_id }}/{{ event_id }}/{{ start }}/{{ end }}"
#     condition:
#       # - condition: template
#       #   value_template: "{{ ( now().timestamp() - as_timestamp(state_attr('automation.front_door_camera_detections','last_triggered')) ) | int > 60 }}"
#     action:
#       # - service: notify.mobile_app_jk_2
#       #   metadata: {}
#       #   data:
#       #     title: "Test"
#       #     message: "Test message"
#       #     data:
#       #       image: "{{image_path}} {{start}} {{end}}"
#       #       video: "{{video_path}}"
#       #       push:
#       #         sound:
#       #           name: default
#       #           critical: 1
#       #           volume: 1
#       #
#       # If camera notifications are disabled and a person is
#       # detected then always alert us
#       - choose:
#           - conditions:
#               # Camera Notifications are disabled
#               - condition: state
#                 entity_id: input_boolean.camera_notifications
#                 state: "off"
#               # It's a person detection
#               - condition: template
#                 value_template: "{{ 'person' in trigger.entity_id }}"
#             sequence:
#               - service: script.camera_detection_alert
#                 data:
#                   entity_id: "{{ trigger.entity_id }}"
#                   camera_name: "{{ camera_name }}"
#                   camera: "camera.front_door_camera_high_resolution_channel"
#                   image_path: "{{ image_path }}"
#                   video_path: "{{ video_path }}"
#       #
#       #
#       # If camera notifications are enabled, then always
#       # trigger an alert
#       - choose:
#           - conditions:
#               # Camera Notifications are enabled
#               - condition: state
#                 entity_id: input_boolean.camera_notifications
#                 state: "on"
#             sequence:
#               - service: script.camera_detection_alert
#                 data:
#                   entity_id: "{{ trigger.entity_id }}"
#                   camera_name: "{{ camera_name }}"
#                   camera: "camera.front_door_camera_high_resolution_channel"
#                   image_path: "{{ image_path }}"
#                   video_path: "{{ video_path }}"
