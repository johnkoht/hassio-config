input_boolean:
  # Boolean to identify if the shower is currently
  # being used/occupied
  main_bathroom_shower_occupied:
    name: Main Bathroom Shower Occupied
    icon: mdi:shower-head

input_number:
  main_bathroom_initial_humidity:
    name: Main Bathroom Initial Humidity
    initial: 30
    min: 0
    max: 100
    step: 1

automation:
  # Main Shower Occupied On
  #
  # This automation simply turns on an input_boolean
  # when the shower is occupied, which is detected by
  # a humidity sensor
  #
  - id: "main_bathroom_shower_occupied"
    alias: "Main Bathroom Shower Occupied"
    mode: "single"
    trigger:
      # Shower humidity over 60%
      - platform: numeric_state
        entity_id: sensor.main_bathroom_humidity
        above: 60
      # Humidity spikes more than 20%
      - platform: template
        value_template: "{{ (states.sensor.main_bathroom_humidity.state | int) - (states.input_number.main_bathroom_initial_humidity.state | int) > 25 }}"
      # Humidity spikes more than 40%
      - platform: template
        value_template: "{{ (states.sensor.main_bathroom_humidity.state | int) - (states.input_number.main_bathroom_initial_humidity.state | int) > 40 }}"
    condition:
      # Main Bathroom is occupied
      - condition: state
        entity_id: input_boolean.main_bathroom_occupied
        state: "on"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.main_bathroom_shower_occupied

  # Main Shower Not Occupied
  #
  # Turns off the shower occupancy
  #
  - id: "main_bathroom_shower_not_occupied"
    alias: "Main Bathroom Shower Not Occupied"
    mode: "single"
    trigger:
      # Shower humidity crosses under 85%
      - platform: numeric_state
        entity_id: sensor.main_bathroom_humidity
        below: 85
      # Shower humidity crosses under 75%
      - platform: numeric_state
        entity_id: sensor.main_bathroom_humidity
        below: 75
      # Shower humidity crosses under 65%
      - platform: numeric_state
        entity_id: sensor.main_bathroom_humidity
        below: 65
      # # Shower humidity crosses under 55%
      # - platform: numeric_state
      #   entity_id: sensor.main_bathroom_humidity
      #   below: 55
      # # Shower humidity crosses under 45%
      # - platform: numeric_state
      #   entity_id: sensor.main_bathroom_humidity
      #   below: 45
      # Humidity drops to within 23% of initial humidity
      - platform: template
        value_template: "{{ (states.sensor.main_bathroom_humidity.state | int) - (states.input_number.main_bathroom_initial_humidity.state | int) < 23 }}"
        for:
          minutes: 4
    condition:
      # # Main Bathroom is occupied
      # - condition: state
      #   entity_id: input_boolean.main_bathroom_occupied
      #   state: "on"
      # Bathroom humidity within 15% of initial humidity
      - condition: template
        value_template: "{{ (states.sensor.main_bathroom_humidity.state | int) - (states.input_number.main_bathroom_initial_humidity.state | int) < 25 }}"
      # Shower is currently occupied
      - condition: state
        entity_id: input_boolean.main_bathroom_shower_occupied
        state: "on"
    action:
      - service: input_boolean.turn_off
        entity_id: input_boolean.main_bathroom_shower_occupied

  # Record the bathroom humidity when the
  # bathroom becomes occupied. This will help
  # figure out if the humidity has spiked since typical
  # humidity is much lower in the winter than summer.
  - id: "main_bathroom_set_initial_humidity"
    alias: "Main bathroom Set Initial Humidity"
    mode: "single"
    trigger:
      # When the bathroom becomes occupied
      - platform: state
        entity_id: input_boolean.main_bathroom_occupied
        to: "on"
    action:
      - service: input_number.set_value
        data:
          entity_id: input_number.main_bathroom_initial_humidity
          value: "{{ states.sensor.main_bathroom_humidity.state }}"
