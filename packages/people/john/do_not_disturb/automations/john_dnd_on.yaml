automation:
  - id: "john_dnd_on"
    initial_state: on
    alias: "John DnD On"
    mode: queued
    trigger:
      # # In a meeting
      # - platform: state
      #   entity_id: calendar.john_launchpadlab_com
      #   to: "on"
      # Webcam turned on
      - platform: state
        entity_id: binary_sensor.john_laptop_camera_active
        to: "on"
      # On a work call
      - platform: state
        entity_id: input_boolean.john_work_call
        to: "on"
      # # 1 min before event
      # - platform: calendar
      #   event: start
      #   entity_id: calendar.john_launchpadlab_com
      #   offset: -00:01:00
      # # 1 min after event
      # - platform: calendar
      #   event: start
      #   entity_id: calendar.john_launchpadlab_com
      #   offset: 00:01:00
      # # Calendar started
      # - platform: calendar
      #   event: start
      #   entity_id: calendar.john_launchpadlab_com
      # Personal time turns OFF
      - platform: state
        entity_id: input_boolean.john_personal_time
        to: "off"
    condition:
      # # Camera ON
      # # Calendar ON AND Personal Time OFF
      # - condition: or
      #   conditions:
      #     # Webcam is ON
      #     - condition: state
      #       entity_id: binary_sensor.john_laptop_camera_active
      #       state: "on"
      #     # OR I have a calendar event and it's not personal
      #     - condition: and
      #       conditions:
      #         # Work calendar is ON
      #         - condition: state
      #           entity_id: calendar.john_launchpadlab_com
      #           state: "on"
      #         # Not personal time (GSD, OOO, etc)
      #         - condition: state
      #           entity_id: input_boolean.john_personal_time
      #           state: "off"

      # Not personal time (GSD, OOO, etc)
      - condition: state
        entity_id: input_boolean.john_personal_time
        state: "off"

      - condition: or
        conditions:
          # On a work call
          - condition: state
            entity_id: input_boolean.john_work_call
            state: "on"
          # Camera is ON
          - condition: state
            entity_id: binary_sensor.john_laptop_camera_active
            state: "on"

      # It's working hours
      - condition: state
        entity_id: binary_sensor.work_hours
        state: "on"
      # Not already active
      - condition: state
        entity_id: input_boolean.john_dnd
        state: "off"
    action:
      - service: input_boolean.turn_on
        entity_id: input_boolean.john_dnd
      - service: notify.mobile_app_jk
        data:
          message: John's DnD mode has been turned on
          title: John DnD On!
# automation:
#   - id: "john_dnd_on"
#     initial_state: on
#     alias: "John DnD On"
#     trigger:
#       # DnD Bayesian turns on
#       - platform: state
#         entity_id: binary_sensor.john_do_not_disturb
#         to: "on"
#     condition:
#       # House is occupied
#       - condition: state
#         entity_id: input_boolean.house_occupied
#         state: "on"
#       # Bayesian sensor is on
#       - condition: state
#         entity_id: binary_sensor.john_do_not_disturb
#         state: "on"
#       # Not already active
#       - condition: state
#         entity_id: input_boolean.john_dnd
#         state: "off"
#     action:
#       - service: input_boolean.turn_on
#         entity_id: input_boolean.john_dnd
#       - service: notify.mobile_app_jk
#         data:
#           message: John's DnD mode has been turned on
#           title: John DnD On!
