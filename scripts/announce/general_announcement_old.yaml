# General Announcement
#
# This script will broadcast an announcement across
# all announcement devices (e.g. sonos). It will first
# take a snapshot of anything playing, adjust the volume,
# make the announcement, and then resume.
#
# USAGE:
# service: script.general_announcement
# data:
#   speech_message: "Hello, world!"
#

# media_player: >-
#   {% if media_player | length == 0 %}
#     {% set media_player = [
#       'media_player.livingroomcc',
#       'media_player.bedroom'
#     ] %}
#   {% endif %}
#   {% if media_player is not string and media_player is sequence %}
#     {% set media_player = media_player|join(', ') %}
#   {% endif %}
#   {{ media_player }}

alias: General Announcement Old
mode: "queued"
sequence:
  # Somebody is home
  - condition: state
    entity_id: input_boolean.house_occupied
    state: "on"
  # Speech notifications is enabled
  - condition: state
    entity_id: input_boolean.speech_notifications
    state: "on"
  - condition: time
    after: "07:00:00"
    before: "22:00:00"

    # Take a snapshot of current Sonos Audio
  - service: sonos.snapshot
    entity_id: all
    data:
      with_group: true

  # Capture the current media player volumes
  - service: input_number.set_value
    entity_id: input_number.sonos_office_volume
    data:
      value: "{{ state_attr('media_player.sonos_office','volume_level') }}"
  - service: input_number.set_value
    entity_id: input_number.sonos_family_and_kitchen_volume
    data:
      value: "{{ state_attr('media_player.sonos_family_and_kitchen','volume_level') }}"

  # Set the volume for the ding
  - service: media_player.volume_set
    entity_id: group.announcements_devices
    data:
      volume_level: >-
        {% if states.input_boolean.quiet_mode.state == "on" %}
          0.2
        {% elif now().strftime('%H')|int > 8 and now().strftime('%H')|int < 20 %}
          0.4
        {% else %}
          0.3
        {% endif %}

  # Play an announcement ping
  - service: media_player.play_media
    entity_id: group.announcements_devices
    data:
      media_content_id: https://github.com/johnkoht/hass-config/blob/master/config/sounds/Notification-sound.mp3?raw=true
      media_content_type: music

  - alias: "Wait 2s"
    delay: 2.5

  # Set the volume for the TTS
  - service: media_player.volume_set
    entity_id: group.announcements_devices
    data:
      volume_level: >-
        {% if states.input_boolean.quiet_mode.state == "on" %}
          0.4
        {% elif now().strftime('%H')|int > 8 and now().strftime('%H')|int < 20 %}
          0.6
        {% else %}
          0.5
        {% endif %}

  # TTS
  - service: tts.google_say
    entity_id: group.announcements_devices
    data:
      message: "{{ speech_message }}"

  # Restore the original volume
  - service: media_player.volume_set
    entity_id: media_player.sonos_office
    data:
      volume_level: "{{ states('input_number.sonos_office_volume') }}"
  # Restore the original volume
  - service: media_player.volume_set
    entity_id: media_player.sonos_family_and_kitchen
    data:
      volume_level: "{{ states('input_number.sonos_family_and_kitchen_volume') }}"

  - alias: "Wait 5s"
    delay: 5
  - wait_template: "{{ not is_state('media_player.sonos_family_and_kitchen', 'playing') }}"

  # Restore from snapshot
  - service: sonos.restore
    entity_id: all
    data:
      with_group: true
